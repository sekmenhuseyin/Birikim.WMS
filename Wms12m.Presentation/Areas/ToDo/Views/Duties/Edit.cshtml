@model Gorevler
<div class="modal-content">
    <div class="close-modal" data-dismiss="modal"><div class="lr"><div class="rl"></div></div></div>
    <div class="container">
        <div class="portlet box green">
            <div class="portlet-title">
                <div class="caption">
                    <i class="fa fa-gift"></i>Düzenle
                </div>
            </div>
            <div class="portlet-body form">
                @using (Ajax.BeginForm("Save", "Duties", new { area = "ToDo" }, new AjaxOptions { OnSuccess = "getresult", OnBegin = "$('#btnSubmit').prop('disabled', true);", OnFailure = "$('#btnSubmit').prop('disabled', false);Modaldialog('Lütfen Tekrar Deneyin', 'Hata', 'Tamam', 'btn-danger');" }, new { @class = "form-horizontal" }))
                {
                    @Html.HiddenFor(model => model.ID)
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true)
                    <div class="form-body">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.ID)
                        <div class="form-group">
                            <label class="col-md-2 control-label">Firma</label>
                            <div class="col-md-8">
                                @Html.DropDownList("MusteriID", null, string.Empty, htmlAttributes: new { @class = "form-control input-circle MusteriID", @onchange = "getProje(this.value,'ProjeList', 'FormList');", required = "required" })
                                <span class="field-validation-valid" data-valmsg-for="MusteriID" data-valmsg-replace="true" style="color:red;"></span>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-md-2 control-label">Proje</label>
                            <div class="col-md-8">
                                @Html.DropDownList("Proje", null, string.Empty, htmlAttributes: new { @class = "form-control input-circle Proje", @id = "ProjeList", @onchange = "getForm(this.value, 'FormList');", required = "required" })
                                <span class="field-validation-valid" data-valmsg-for="MusteriID" data-valmsg-replace="Proje" style="color:red;"></span>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-md-2 control-label">Form</label>
                            <div class="col-md-8">
                                @Html.DropDownList("ProjeFormID", null, string.Empty, htmlAttributes: new { @class = "form-control input-circle ProjeFormID", @id = "FormList", required = "required" })
                                <span class="field-validation-valid" data-valmsg-for="ProjeFormID" data-valmsg-replace="true" style="color:red;"></span>
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Sorumlu, "Sorumlu", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-8">
                                @Html.DropDownList("Sorumlu", null, htmlAttributes: new { @class = "form-control input-circle", required = "required" })
                                @Html.ValidationMessageFor(model => model.Sorumlu, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Sorumlu2, "Sorumlu 2", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-8">
                                @Html.DropDownList("Sorumlu2", null, htmlAttributes: new { @class = "form-control input-circle satirekle" })
                                @Html.ValidationMessageFor(model => model.Sorumlu2, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Sorumlu3, "Sorumlu 3", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-8">
                                @Html.DropDownList("Sorumlu3", null, htmlAttributes: new { @class = "form-control input-circle satirekle" })
                                @Html.ValidationMessageFor(model => model.Sorumlu3, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.KontrolSorumlusu, "Kontrol Sorumlusu", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-8">
                                @Html.DropDownList("KontrolSorumlusu", null, htmlAttributes: new { @class = "form-control input-circle satirekle" })
                                @Html.ValidationMessageFor(model => model.KontrolSorumlusu, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Gorev, "Görev", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-8">
                                @Html.TextBoxFor(a => a.Gorev, new { @class = "form-control input-circle", @required = "required" })
                                @Html.ValidationMessageFor(model => model.Gorev, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group pointer">
                            @Html.LabelFor(model => model.Aciklama, "Açıklama", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-8">
                                @Html.TextAreaFor(model => model.Aciklama, 10, 55, new { @class = "form-control input-circle" })
                                @Html.ValidationMessageFor(model => model.Aciklama, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.GorevTipiID, "Görev Tipi", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-8">
                                @Html.DropDownList("GorevTipiID", null, htmlAttributes: new { @class = "form-control input-circle", required = "required" })
                                @Html.ValidationMessageFor(model => model.GorevTipiID, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.DepartmanID, "Departman", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-8">
                                @Html.DropDownList("DepartmanID", null, htmlAttributes: new { @class = "form-control input-circle", required = "required" })
                                @Html.ValidationMessageFor(model => model.DepartmanID, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group hidden">
                            <input name="silinenler" id="silinenler" type="text" value="" />
                        </div>
                        <div class="form-group">
                            <div class="col-md-offset-5 col-md-7">
                                @if (Model.DurumID == ComboItems.gydAtandı.ToInt32() || Model.DurumID == ComboItems.gydBaşlandı.ToInt32() || Model.DurumID == ComboItems.gydOnayVer.ToInt32() || Model.DurumID == ComboItems.gydKaliteKontrol.ToInt32()) {<input type="submit" value="Kaydet" class="btn btn-circle green" id="btnSubmit" />}
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    var silinenler = ""; var sayac = 1;
    $(document).ready(function () {
        $(".satirekle").prepend("<option value=''>Seçiniz !!!</option>");
        @if (Model.Sorumlu2.ToString2().Length == 0) { <text>$(".satirekle")[0].selectedIndex = 0;</text> }
        @if (Model.Sorumlu3.ToString2().Length == 0) { <text>$(".satirekle")[1].selectedIndex = 0;</text> }
        @if (Model.KontrolSorumlusu.ToString2().Length == 0) { <text>$(".satirekle")[2].selectedIndex = 0;</text> }
        var model = @Html.Raw(Json.Encode(Model.GorevlerToDoLists.Select(m=> new frmGorevTodos { ID=m.ID, Aciklama=m.Aciklama, TahminiBitis=m.TahminiBitis.ToDatetime().ToString("dd.MM.yyyy hh:mm"), Onay = m.Onay }).ToList()));
        $.each(model, function (index, value) {
            console.log(value);
            var i = sayac++;
            $(".last-work").removeClass("fa fa-plus-circle");
            $(".insert-work-icon i").removeClass("last-work");
            var newElement = $("<div>").addClass("form-group todo-content");
            newElement.append("<div class='control-label col-md-2'><span class='work-index'>" + i + "</span > <span>-</span></div>" +
                            "<div class='col-md-6'>" +
                                "<input class='hidden' type='text' name='todo' required = 'required' value='" + value.ID + "'>" +
                                "<input class='form-control input-circle' type='text' name='work' required = 'required' value='" + value.Aciklama + "'"+ (value.Onay === true ? " readonly='readonly'" : "" ) +">" +
                            "</div>" +
                            "<div class='col-md-2'>" +
                                "<input class='form-control input-circle"+ (value.Onay === true ? "" : " customDate" ) +"' type='text' name='tahminiBitis' required = 'required' value='" + value.TahminiBitis + "'"+ (value.Onay === true ? " readonly='readonly'" : "" ) +">" +
                            "</div>" +
                            "<div class='insert-work-icon col-md-1'>" +
                                "<i class='fa fa-minus-circle delete-icn m-l-5' onclick='DeleteElement(this, " + value.ID + ")'></i>" +
                                "<i class='fa fa-plus-circle last-work m-l-5 pull-right' onclick='NewElement()'></i>" +
                            "</div>");
            newElement.addClass("index" + i);
            if (i === 1) { newElement.insertAfter(".pointer"); } else { newElement.insertAfter(".todo-content:last"); }
        });
        if (sayac === 2) {
            $(".delete-icn").css("display", "none");
            $(".insert-work-icon i:last").addClass("last-work");
            $(".last-work").addClass("fa fa-plus-circle");
        }
        addDatePicker();
    });
    function addDatePicker() {
        $(function () {
            $('.customDate').datetimepicker({
                locale: 'tr',
                language: 'tr',
                format: 'dd.mm.yyyy hh:ii',
                minView: 1,
                maxView: 3,
                todayBtn: true,
                todayHighlight: true
            });
        });
    }
    function NewElement() {
        var index = sayac++;
        $(".last-work").removeClass("fa fa-plus-circle");
        $(".insert-work-icon i").removeClass("last-work");
        $(".delete-icn").css("display", "initial");
        var newElement = $("<div>").addClass("form-group todo-content");
        newElement.append("<div class='control-label col-md-2'><span class='work-index'>" + index + "</span > <span>-</span></div>" +
            "<div class='col-md-6'>" +
                "<input class='hidden' type='text' name='todo' required = 'required' value='0'>" +
                "<input class='form-control input-circle' type='text' name='work' required = 'required' value=''>" +
            "</div>" +
            "<div class='col-md-2'>" +
                "<input class='form-control input-circle customDate' type='text' name='tahminiBitis' required = 'required'>" +
            "</div>" +
            "<div class='insert-work-icon col-md-1'>" +
                "<i class='fa fa-minus-circle delete-icn m-l-5' onclick='DeleteElement(this, 0)'></i>" +
                "<i class='fa fa-plus-circle last-work m-l-5 pull-right' onclick='NewElement()'></i>" +
            "</div>");
        newElement.addClass("index" + index);
        newElement.insertAfter(".todo-content:last");
        addDatePicker();
    };
    function DeleteElement(secili, id) {
        sayac--;
        if (id !== 0) { silinenler += id + ","; }
        $("#silinenler").val(silinenler);
        $(secili).closest(".form-group").remove();
        $(".todo-content .work-index").each(function (index) { $(this).text(index + 1) });
        if (!$(".last-work").length) {
            $(".todo-content i:last").addClass("last-work");
            $(".last-work").addClass("fa fa-plus-circle");
        }
        if (sayac === 2) {
            $(".delete-icn").css("display", "none");
            $(".insert-work-icon i:last").addClass("last-work");
            $(".last-work").addClass("fa fa-plus-circle");
        }
    };
</script>
