@model GorevCalisma
@{
    List<GorevToDoList> tbl = ViewBag.TodoList;
}<div class="modal-content">
    <div class="close-modal" data-dismiss="modal"><div class="lr"><div class="rl"></div></div></div>
    <div class="container">
        <div class="portlet box green">
            <div class="portlet-title">
                <div class="caption">
                    <i class="fa fa-gift"></i>Görev Çalışma Düzenle
                </div>
            </div>
            <div class="portlet-body form">
                @using (Ajax.BeginForm("Save", "DutyWork", new { area = "ToDo" }, new AjaxOptions { InsertionMode = InsertionMode.Replace, OnFailure = "Modaldialog('Lütfen Tekrar Deneyin', 'Hata', 'Tamam', 'btn-danger');", OnSuccess = "CreateEdit('0');" }, new { @class = "form-horizontal" }))
                {
                    @Html.HiddenFor(model => model.ID)
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true)
                    <div class="form-body">
                        <div class="form-group row pointer">
                            <div class="control-label col-md-1">Görev</div>
                            <div class="col-md-10">
                                @Html.DropDownList("GorevID", null, htmlAttributes: new { @class = "form-control input-circle", @disabled = false, required = "required" })
                                @Html.ValidationMessageFor(model => model.GorevID, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Tarih, htmlAttributes: new { @class = "control-label col-md-1" })
                            <div class="col-md-10">
                                @Html.TextBoxFor(model => model.Tarih, new { @Value = Model.Tarih.ToString("dd.MM.yyyy"), id = "Tarih", @class = "form-control input-circle date-picker", required = "required" })
                                @Html.ValidationMessageFor(model => model.Tarih, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="control-label col-md-1">Çalışma Süresi</div>
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.CalismaSure, new { htmlAttributes = new { @class = "form-control input-circle", required = "required" } })
                                @Html.ValidationMessageFor(model => model.CalismaSure, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="control-label col-md-1">Çalışma</div>
                            <div class="col-md-10">
                                @Html.TextAreaFor(model => model.Calisma, 10, 100, new { htmlAttributes = new { @class = "form-control input-circle txar-cal", required = "required" } })
                                @Html.ValidationMessageFor(model => model.Calisma, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-7">
                                <button type="button" class="btn btn-danger pull-left" data-dismiss="modal"><i class="fa fa-times"></i> Kapat</button>
                                <input type="submit" value="Kaydet" class="btn green pull-right" />
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    sayac = 1;
    $(document).ready(function () { $('.date-picker').datepicker(); });
     var model = @Html.Raw(Json.Encode(tbl.Select(m=> new frmGorevTodos { ID=m.ID, Aciklama=m.Aciklama, AktifPasif=m.AktifPasif, OnayDurum=m.OnayDurum }).ToList()));
     $.each(model, function (indexx, value) {
         var index = sayac++;
         var newElement = $("<div>").addClass("form-group row todo-content");
         newElement.append("<div class='todo-text todo-id" + index + "' style='display:none'></div><div class='control-label col-md-1'><div class='checkitem" + index + "'></div></div><div class='col-md-10'><div class='txt-aciklama work-" + index + "' style='border-color: #ece7e7'></div></div>");
         newElement.addClass("index" + index);
         if (index == 1) {
             newElement.insertAfter(".pointer");
         }
         else {
             newElement.insertAfter(".todo-content:last");
         }
         $(".work-" + index).dxTextArea();
         $(".work-" + index).dxTextArea("instance").option({ name: "work", value: value.Aciklama, maxHeight: 80, readOnly: true });
         $(".todo-id" + index).dxTextBox();
         $(".todo-id" + index).dxTextBox("instance").option({ name: "todo", value: value.ID });
         $(".checkitem" + index).dxCheckBox({
             value: value.OnayDurum,
             name: "checkitem",
             onValueChanged: function (e) {

             },            
         });
         if (value.AktifPasif == false) {
             $(".checkitem" + index).dxCheckBox("instance").option({ readOnly: true });
             $(".checkitem" + index + " .dx-checkbox-icon").css("color", "red");
         }
     });
</script>