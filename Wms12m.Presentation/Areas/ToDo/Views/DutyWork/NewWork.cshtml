@model GorevCalisma

    <div class="modal-content">
        <div class="close-modal" data-dismiss="modal"><div class="lr"><div class="rl"></div></div></div>
        <div class="container">
            <div class="portlet box green">
                <div class="portlet-title">
                    <div class="caption">
                        <i class="fa fa-gift"></i>Çalışma Ekle

                    </div>
                </div>
                <div class="portlet-body form">
                    @using (Ajax.BeginForm("Save", "DutyWork", new { area = "ToDo" }, new AjaxOptions { InsertionMode = InsertionMode.Replace, OnFailure = "Modaldialog('Lütfen Tekrar Deneyin', 'Hata', 'Tamam', 'btn-danger');", OnSuccess = "CreateEdit('0');" }, new { @class = "form-horizontal" }))
                    {
                        @Html.HiddenFor(model => model.ID)
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true)
                        <div class="form-body">
                            <div class="form-group pointer">
                                <div class="control-label col-md-1">Görev</div>
                                <div class="col-md-10">
                                    @Html.DropDownList("GorevID", null, htmlAttributes: new { @class = "form-control input-circle", @readonly = "readonly" })
                                    @Html.ValidationMessageFor(model => model.GorevID, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Tarih, htmlAttributes: new { @class = "control-label col-md-1" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Tarih, new { htmlAttributes = new { id = "Tarih", @class = "form-control input-circle date-picker", @Value = "" } })
                                    @Html.ValidationMessageFor(model => model.Tarih, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="control-label col-md-1">Çalışma Süresi</div>
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.CalismaSure, new { htmlAttributes = new { @class = "form-control input-circle" } })
                                    @Html.ValidationMessageFor(model => model.CalismaSure, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="control-label col-md-1">Çalışma</div>
                                <div class="col-md-10">
                                    @Html.TextAreaFor(model => model.Calisma, 10, 55, new { htmlAttributes = new { @class = "form-control input-circle" } })
                                    @Html.ValidationMessageFor(model => model.Calisma, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-actions">
                                <div class="row">
                                    <div class="col-md-offset-3 col-md-9">
                                        <center>
                                            <input type="submit" value="Ekle" class="btn btn-circle green" />
                                            <button type="button" class="btn btn-circle grey-salsa btn-outline" onclick="CreateEditNewWork('0')">Temizle</button>
                                        </center>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
    </div>
    </div>

<script type="text/javascript">
    sayac = 1;
    $(document).ready(function () {
        $('.date-picker').datepicker();

    });
    var aciklama = "@Html.Raw(ViewBag.Aciklama)";
    aciklama = aciklama.split("12MConsulting12MDA");
    aciklama.splice(aciklama.length - 1, 1);
    $.each(aciklama, function (index, value) {
        var deger = "";
        if (value.substring(0,5) == "FFFFF") {
            deger = false;
        }
        else {
            deger =true
        }
        var index = sayac++;
        $(".last-work").removeClass("fa fa-plus-circle");
        $(".insert-work-icon i").removeClass("last-work");
        $(".delete-icn").css("display", "initial");
        var newElement = $("<div>").addClass("form-group row todo-content");
        newElement.append("<div class='control-label col-md-1'><div class='checkitem" + index + "'></div></div><div class='col-md-10'><div class='txt-aciklama work-" + index + "' style='border-color: #ece7e7'></div></div>");
        newElement.addClass("index" + index);
        if (index == 1) {
            newElement.insertAfter(".pointer");
        }
        else {
            newElement.insertAfter(".todo-content:last");
        }
        
        $(".work-" + index).dxTextArea();
        $(".work-" + index).dxTextArea("instance").option({ name: "work", value: value.substring(5), maxHeight: 80, readOnly:true});
        $(".checkitem"+index).dxCheckBox({
            value: deger,
            onValueChanged: function (e) {

            }
        });
        $(".checkitem" + index).dxCheckBox("instance").option({ name: "checkitem"});
    });
    function CreateEditNewWork(Id) {
        if (Id == 0) {
            $("#ID").val("0");
            $("#Tarih").val("");
            $("#CalismaSure").val("");
            $("#Calisma").val("");

        }
    }
</script>
